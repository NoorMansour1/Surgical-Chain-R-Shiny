pl <- subset(get_mon_resources(oversteer), resource == c("oc_a", "oc_b", "oc_c"))
ggplot(data = pl,
mapping = aes(time, queue)) +
geom_line(aes(color = factor(resource))) + facet_grid(var(resource))
source('~/Surgical-Chain-R-Shiny/Simulation Models/oversteering.R')
?set_capacity
?schedule
#Using a scheudle object to schedule capacity changes
#capacity changes from time 0 to 25 to 1, from 25 to 50 to 0 and so on
# it reeccurs in the period of 100 time units
capacity_schedule <- schedule(timetable =c(0, 25, 50, 75, 100),
values = c(1,0,1,3,1),period = 100)
# Initialize the simulation at the beginning
oversteer <- simmer("oversteer")
# Define trajectories to follow
normal_a<- trajectory("normal_a") %>%
# Set capacity dynamically based on reactive functions
#set_capacity("oc_a", function() {oc_a_capacity()} ) %>%
# Follow the surgical chain
seize("oc_a") %>%
timeout(10) %>%
release("oc_a") %>%
# Set capacity dynamically based on reactive functions
#note: capactiy only changes if some patient is going through
#this trajectory
#set_capacity("or_a", function() {or_a_capacity()} ) %>%
seize("or_a") %>%
timeout(10) %>%
release("or_a")
normal_b <- trajectory("normal_b") %>%
# Set capacity dynamically based on reactive functions
#set_capacity("oc_b", function() {oc_b_capacity()} ) %>%
# Follow the surgical chain
seize("oc_b") %>%
timeout(10) %>%
release("oc_b") %>%
#set_capacity("or_b", function() {or_b_capacity()} ) %>%
seize("or_b") %>%
timeout(10) %>%
release("or_b")
normal_c <- trajectory("normal_c") %>%
# Set capacity dynamically based on reactive functions
#set_capacity("oc_c", function() {oc_c_capacity()} ) %>%
# Follow the surgical chain
seize("oc_c") %>%
timeout(10) %>%
release("oc_c") %>%
#set_capacity("or_c", function() {or_c_capacity()} ) %>%
seize("or_c") %>%
timeout(10) %>%
release("or_c")
# Build the environment with resources and generators
oversteer %>%
add_resource("oc_a", or_a_capacity()) %>%
#   add_resource("oc_b", capacity = 0) %>%
#   add_resource("oc_c", capacity = 0) %>%
add_resource("or_a", or_a_capacity()) %>%
#   add_resource("or_b", capacity = 0) %>%
#  add_resource("or_c", capacity = 0) %>%
add_generator("patient_a", normal_a, function() {10})
capacity_schedule <- schedule(timetable =c(0, 25, 50, 75, 100),
values = c(1,0,1,3,1),period = 100)
# Initialize the simulation at the beginning
oversteer <- simmer("oversteer")
# Define trajectories to follow
normal_a<- trajectory("normal_a") %>%
# Set capacity dynamically based on reactive functions
#set_capacity("oc_a", function() {oc_a_capacity()} ) %>%
# Follow the surgical chain
seize("oc_a") %>%
timeout(10) %>%
release("oc_a") %>%
# Set capacity dynamically based on reactive functions
#note: capactiy only changes if some patient is going through
#this trajectory
#set_capacity("or_a", function() {or_a_capacity()} ) %>%
seize("or_a") %>%
timeout(10) %>%
release("or_a")
normal_b <- trajectory("normal_b") %>%
# Set capacity dynamically based on reactive functions
#set_capacity("oc_b", function() {oc_b_capacity()} ) %>%
# Follow the surgical chain
seize("oc_b") %>%
timeout(10) %>%
release("oc_b") %>%
#set_capacity("or_b", function() {or_b_capacity()} ) %>%
seize("or_b") %>%
timeout(10) %>%
release("or_b")
normal_c <- trajectory("normal_c") %>%
# Set capacity dynamically based on reactive functions
#set_capacity("oc_c", function() {oc_c_capacity()} ) %>%
# Follow the surgical chain
seize("oc_c") %>%
timeout(10) %>%
release("oc_c") %>%
#set_capacity("or_c", function() {or_c_capacity()} ) %>%
seize("or_c") %>%
timeout(10) %>%
release("or_c")
# Build the environment with resources and generators
oversteer %>%
add_resource("oc_a", capacity_schedule) %>%
#   add_resource("oc_b", capacity = 0) %>%
#   add_resource("oc_c", capacity = 0) %>%
add_resource("or_a", capacity_schedule) %>%
#   add_resource("or_b", capacity = 0) %>%
#  add_resource("or_c", capacity = 0) %>%
add_generator("patient_a", normal_a, function() {10})
#   add_generator("patient_b", normal_b, function() {10}) %>%
#   add_generator("patient_c", normal_c, function() {10})
#######OVERSTEERING PART 2 #####################################################
#Using a scheudle object to schedule capacity changes
#capacity changes from time 0 to 25 to 1, from 25 to 50 to 0 and so on
# it reeccurs in the period of 100 time units
capacity_schedule <- schedule(timetable =c(0, 25, 50, 75, 100),
values = c(1,0,1,3,1),period = 100)
#######OVERSTEERING PART 2 #####################################################
#Using a scheudle object to schedule capacity changes
#capacity changes from time 0 to 25 to 1, from 25 to 50 to 0 and so on
# it reeccurs in the period of 100 time units
capacity_schedule <- schedule(timetable =c(0, 25, 50, 75, 100),
values = c(1,0,1,3),period = 100)
#######OVERSTEERING PART 2 #####################################################
#Using a scheudle object to schedule capacity changes
#capacity changes from time 0 to 25 to 1, from 25 to 50 to 0 and so on
# it reeccurs in the period of 100 time units
capacity_schedule <- schedule(timetable =c(25, 50, 75, 100),
values = c(1,0,1,3),period = 100)
oversteer <- simmer("oversteer")
# Define trajectories to follow
normal_a<- trajectory("normal_a") %>%
# Set capacity dynamically based on reactive functions
#set_capacity("oc_a", function() {oc_a_capacity()} ) %>%
# Follow the surgical chain
seize("oc_a") %>%
timeout(10) %>%
release("oc_a") %>%
# Set capacity dynamically based on reactive functions
#note: capactiy only changes if some patient is going through
#this trajectory
#set_capacity("or_a", function() {or_a_capacity()} ) %>%
seize("or_a") %>%
timeout(10) %>%
release("or_a")
normal_b <- trajectory("normal_b") %>%
# Set capacity dynamically based on reactive functions
#set_capacity("oc_b", function() {oc_b_capacity()} ) %>%
# Follow the surgical chain
seize("oc_b") %>%
timeout(10) %>%
release("oc_b") %>%
#set_capacity("or_b", function() {or_b_capacity()} ) %>%
seize("or_b") %>%
timeout(10) %>%
release("or_b")
normal_c <- trajectory("normal_c") %>%
# Set capacity dynamically based on reactive functions
#set_capacity("oc_c", function() {oc_c_capacity()} ) %>%
# Follow the surgical chain
seize("oc_c") %>%
timeout(10) %>%
release("oc_c") %>%
#set_capacity("or_c", function() {or_c_capacity()} ) %>%
seize("or_c") %>%
timeout(10) %>%
release("or_c")
# Build the environment with resources and generators
oversteer %>%
add_resource("oc_a", capacity_schedule) %>%
#   add_resource("oc_b", capacity = 0) %>%
#   add_resource("oc_c", capacity = 0) %>%
add_resource("or_a", capacity_schedule) %>%
#   add_resource("or_b", capacity = 0) %>%
#  add_resource("or_c", capacity = 0) %>%
add_generator("patient_a", normal_a, function() {10})
#   add_generator("patient_b", normal_b, function() {10}) %>%
#   add_generator("patient_c", normal_c, function() {10})
oversteer %>% run(100)
oversteer %>% run(200)
plot(get_mon_resources(oversteer))
plot(get_mon_arrivals(oversteer))
plot(get_mon_arrivals(oversteer))
?`simmer.plot-package`
?`simmer.plot
?
?simmer.plot
?plot.arrivals
plot(get_mon_arrivals(oversteer), metric = "waiting_time")
plot(get_mon_arrivals(oversteer), metric = "flow_time")
source('~/Surgical-Chain-R-Shiny/Simulation Models/oversteering.R')
######OVERSTEERING PART 2 #####################################################
#Using a scheudle object to schedule capacity changes
#capacity changes from time 0 to 25 to 1, from 25 to 50 to 0 and so on
# it reeccurs in the period of 100 time units
capacity_schedule <- schedule(timetable =c(25, 50, 75, 100),
values = c(1,0,1,0),period = 100)
# Initialize the simulation at the beginning
oversteer <- simmer("oversteer")
# Define trajectories to follow
normal_a<- trajectory("normal_a") %>%
# Set capacity dynamically based on reactive functions
#set_capacity("oc_a", function() {oc_a_capacity()} ) %>%
# Follow the surgical chain
seize("oc_a") %>%
timeout(10) %>%
release("oc_a") %>%
# Set capacity dynamically based on reactive functions
#note: capactiy only changes if some patient is going through
#this trajectory
#set_capacity("or_a", function() {or_a_capacity()} ) %>%
seize("or_a") %>%
timeout(10) %>%
release("or_a")
normal_b <- trajectory("normal_b") %>%
# Set capacity dynamically based on reactive functions
#set_capacity("oc_b", function() {oc_b_capacity()} ) %>%
# Follow the surgical chain
seize("oc_b") %>%
timeout(10) %>%
release("oc_b") %>%
#set_capacity("or_b", function() {or_b_capacity()} ) %>%
seize("or_b") %>%
timeout(10) %>%
release("or_b")
normal_c <- trajectory("normal_c") %>%
# Set capacity dynamically based on reactive functions
#set_capacity("oc_c", function() {oc_c_capacity()} ) %>%
# Follow the surgical chain
seize("oc_c") %>%
timeout(10) %>%
release("oc_c") %>%
#set_capacity("or_c", function() {or_c_capacity()} ) %>%
seize("or_c") %>%
timeout(10) %>%
release("or_c")
# Build the environment with resources and generators
oversteer %>%
add_resource("oc_a", capacity_schedule) %>%
add_resource("oc_b", capacity = 1) %>%
add_resource("oc_c", capacity = 1) %>%
add_resource("or_a", capacity_schedule) %>%
add_resource("or_b", capacity = 1) %>%
add_resource("or_c", capacity = 1) %>%
add_generator("patient_a", normal_a, function() {10})
add_generator("patient_b", normal_b, function() {10}) %>%
add_generator("patient_c", normal_c, function() {10})
oversteer %>% run(until = 200)
get_mon_arrivals()
get_mon_arrivals(oversteer)
get_mon_arrivals(oversteer) %>%
transform(waiting_time = end_time - start_time - activity_time)
#######OVERSTEERING PART 2 #####################################################
#Using a scheudle object to schedule capacity changes
#capacity changes from time 0 to 25 to 1, from 25 to 50 to 0 and so on
# it reeccurs in the period of 100 time units
capacity_schedule <- schedule(timetable =c(25, 50, 75, 100),
values = c(1,0,1,0),period = 100)
# Initialize the simulation at the beginning
oversteer <- simmer("oversteer")
# Define trajectories to follow
normal_a<- trajectory("normal_a") %>%
# Set capacity dynamically based on reactive functions
#set_capacity("oc_a", function() {oc_a_capacity()} ) %>%
# Follow the surgical chain
seize("oc_a") %>%
timeout(10) %>%
release("oc_a") %>%
# Set capacity dynamically based on reactive functions
#note: capactiy only changes if some patient is going through
#this trajectory
#set_capacity("or_a", function() {or_a_capacity()} ) %>%
seize("or_a") %>%
timeout(10) %>%
release("or_a")
normal_b <- trajectory("normal_b") %>%
# Set capacity dynamically based on reactive functions
#set_capacity("oc_b", function() {oc_b_capacity()} ) %>%
# Follow the surgical chain
seize("oc_b") %>%
timeout(10) %>%
release("oc_b") %>%
#set_capacity("or_b", function() {or_b_capacity()} ) %>%
seize("or_b") %>%
timeout(10) %>%
release("or_b")
normal_c <- trajectory("normal_c") %>%
# Set capacity dynamically based on reactive functions
#set_capacity("oc_c", function() {oc_c_capacity()} ) %>%
# Follow the surgical chain
seize("oc_c") %>%
timeout(10) %>%
release("oc_c") %>%
#set_capacity("or_c", function() {or_c_capacity()} ) %>%
seize("or_c") %>%
timeout(10) %>%
release("or_c")
# Build the environment with resources and generators
oversteer %>%
add_resource("oc_a", capacity_schedule) %>%
add_resource("oc_b", capacity = 1) %>%
add_resource("oc_c", capacity = 1) %>%
add_resource("or_a", capacity_schedule) %>%
add_resource("or_b", capacity = 1) %>%
add_resource("or_c", capacity = 1) %>%
add_generator("patient_a", normal_a, function() {10}, mon = 2) %>%
add_generator("patient_b", normal_b, function() {10}, mon = 2) %>%
add_generator("patient_c", normal_c, function() {10}, mon = 2)
get_mon_arrivals(oversteer) %>%
transform(waiting_time = end_time - start_time - activity_time)
#######OVERSTEERING PART 2 #####################################################
#Using a scheudle object to schedule capacity changes
#capacity changes from time 0 to 25 to 1, from 25 to 50 to 0 and so on
# it reeccurs in the period of 100 time units
capacity_schedule <- schedule(timetable =c(25, 50, 75, 100),
values = c(1,0,1,0),period = 100)
# Initialize the simulation at the beginning
oversteer <- simmer("oversteer")
# Define trajectories to follow
normal_a<- trajectory("normal_a") %>%
# Set capacity dynamically based on reactive functions
#set_capacity("oc_a", function() {oc_a_capacity()} ) %>%
# Follow the surgical chain
seize("oc_a") %>%
timeout(10) %>%
release("oc_a") %>%
# Set capacity dynamically based on reactive functions
#note: capactiy only changes if some patient is going through
#this trajectory
#set_capacity("or_a", function() {or_a_capacity()} ) %>%
seize("or_a") %>%
timeout(10) %>%
release("or_a")
normal_b <- trajectory("normal_b") %>%
# Set capacity dynamically based on reactive functions
#set_capacity("oc_b", function() {oc_b_capacity()} ) %>%
# Follow the surgical chain
seize("oc_b") %>%
timeout(10) %>%
release("oc_b") %>%
#set_capacity("or_b", function() {or_b_capacity()} ) %>%
seize("or_b") %>%
timeout(10) %>%
release("or_b")
normal_c <- trajectory("normal_c") %>%
# Set capacity dynamically based on reactive functions
#set_capacity("oc_c", function() {oc_c_capacity()} ) %>%
# Follow the surgical chain
seize("oc_c") %>%
timeout(10) %>%
release("oc_c") %>%
#set_capacity("or_c", function() {or_c_capacity()} ) %>%
seize("or_c") %>%
timeout(10) %>%
release("or_c")
# Build the environment with resources and generators
oversteer %>%
add_resource("oc_a", capacity_schedule) %>%
add_resource("oc_b", capacity = 1) %>%
add_resource("oc_c", capacity = 1) %>%
add_resource("or_a", capacity_schedule) %>%
add_resource("or_b", capacity = 1) %>%
add_resource("or_c", capacity = 1) %>%
add_generator("patient_a", normal_a, function() {10}, mon = 2) %>%
add_generator("patient_b", normal_b, function() {10}, mon = 2) %>%
add_generator("patient_c", normal_c, function() {10}, mon = 2)
oversteer %>% run(until = 100)
get_mon_arrivals(oversteer) %>%
transform(waiting_time = end_time - start_time - activity_time)
plot(get_mon_arrivals(oversteer))
get_mon_resources(oversteer)
?get_mon_arrivals
get_mon_arrivals(oversteer, per_resource = TRUE) %>%
transform(waiting_time = end_time - start_time - activity_time)
get_mon_arrivals(oversteer, per_resource = TRUE) %>%
transform(waiting_time = end_time - start_time - activity_time)
get_mon_arrivals(oversteer, per_resource = TRUE) %>%
transform(waiting_time = end_time - start_time - activity_time)
#test outpatient vs operating room oversteering
library(simmer)
library(simmer.plot)
#######OVERSTEERING PART 2 #####################################################
#Using a scheudle object to schedule capacity changes
#capacity changes from time 0 to 25 to 1, from 25 to 50 to 0 and so on
# it reeccurs in the period of 100 time units
capacity_schedule <- schedule(timetable =c(25, 50, 75, 100),
values = c(1,0,1,0),period = 100)
# Initialize the simulation at the beginning
oversteer <- simmer("oversteer")
# Define trajectories to follow
normal_a<- trajectory("normal_a") %>%
# Set capacity dynamically based on reactive functions
#set_capacity("oc_a", function() {oc_a_capacity()} ) %>%
# Follow the surgical chain
seize("oc_a") %>%
timeout(10) %>%
release("oc_a") %>%
# Set capacity dynamically based on reactive functions
#note: capactiy only changes if some patient is going through
#this trajectory
#set_capacity("or_a", function() {or_a_capacity()} ) %>%
seize("or_a") %>%
timeout(10) %>%
release("or_a")
normal_b <- trajectory("normal_b") %>%
# Set capacity dynamically based on reactive functions
#set_capacity("oc_b", function() {oc_b_capacity()} ) %>%
# Follow the surgical chain
seize("oc_b") %>%
timeout(10) %>%
release("oc_b") %>%
#set_capacity("or_b", function() {or_b_capacity()} ) %>%
seize("or_b") %>%
timeout(10) %>%
release("or_b")
normal_c <- trajectory("normal_c") %>%
# Set capacity dynamically based on reactive functions
#set_capacity("oc_c", function() {oc_c_capacity()} ) %>%
# Follow the surgical chain
seize("oc_c") %>%
timeout(10) %>%
release("oc_c") %>%
#set_capacity("or_c", function() {or_c_capacity()} ) %>%
seize("or_c") %>%
timeout(10) %>%
release("or_c")
# Build the environment with resources and generators
oversteer %>%
add_resource("oc_a", capacity_schedule) %>%
add_resource("oc_b", capacity = 1) %>%
add_resource("oc_c", capacity = 1) %>%
add_resource("or_a", capacity_schedule) %>%
add_resource("or_b", capacity = 1) %>%
add_resource("or_c", capacity = 1) %>%
add_generator("patient_a", normal_a, function() {10}, mon = 2) %>%
add_generator("patient_b", normal_b, function() {10}, mon = 2) %>%
add_generator("patient_c", normal_c, function() {10}, mon = 2)
oversteer %>% run(until = 100)
get_mon_resources(oversteer)
get_mon_arrivals(oversteer)
get_mon_arrivals(oversteer, per_resource = TRUE) %>%
transform(waiting_time = end_time - start_time - activity_time)
waiting <- get_mon_arrivals(oversteer, per_resource = TRUE) %>%
transform(waiting_time = end_time - start_time - activity_time)
str(waiting)
get_mon_arrivals(oversteer, per_resource = TRUE) %>%
transform(waiting_time = end_time - start_time - activity_time)
library(simmer)
library(simmer.plot)
View(normal_c)
View(normal_a)
View(hospital)
source('~/Surgical-Chain-R-Shiny/Simulation Models/oversteering.R')
source('~/Surgical-Chain-R-Shiny/Simulation Models/oversteering.R')
#test outpatient vs operating room oversteering
library(simmer)
library(simmer.plot)
oversteer <- simmer("oversteer")
# Define trajectories to follow
normal_a<- trajectory("normal_a") %>%
# Set capacity dynamically based on reactive functions
#set_capacity("oc_a", function() {oc_a_capacity()} ) %>%
# Follow the surgical chain
seize("oc_a") %>%
timeout(10) %>%
release("oc_a") %>%
# Set capacity dynamically based on reactive functions
#note: capactiy only changes if some patient is going through
#this trajectory
#set_capacity("or_a", function() {or_a_capacity()} ) %>%
seize("or_a") %>%
timeout(10) %>%
release("or_a")
normal_b <- trajectory("normal_b") %>%
# Set capacity dynamically based on reactive functions
#set_capacity("oc_b", function() {oc_b_capacity()} ) %>%
# Follow the surgical chain
seize("oc_b") %>%
timeout(10) %>%
release("oc_b") %>%
#set_capacity("or_b", function() {or_b_capacity()} ) %>%
seize("or_b") %>%
timeout(10) %>%
release("or_b")
normal_c <- trajectory("normal_c") %>%
# Set capacity dynamically based on reactive functions
#set_capacity("oc_c", function() {oc_c_capacity()} ) %>%
# Follow the surgical chain
seize("oc_c") %>%
timeout(10) %>%
release("oc_c") %>%
#set_capacity("or_c", function() {or_c_capacity()} ) %>%
seize("or_c") %>%
timeout(10) %>%
release("or_c")
# Build the environment with resources and generators
oversteer %>%
add_resource("oc_a", capacity = 0) %>%
add_resource("oc_b", capacity = 0) %>%
add_resource("oc_c", capacity = 0) %>%
add_resource("or_a", capacity = 0) %>%
add_resource("or_b", capacity = 0) %>%
add_resource("or_c", capacity = 0) %>%
add_generator("patient_a", normal_a, function() {10}) %>%
add_generator("patient_b", normal_b, function() {10}) %>%
add_generator("patient_c", normal_c, function() {10})
oversteer %>% run(until = 100)
get_mon_arrivals(oversteer, per_resource = TRUE) %>%
transform(waiting_time = end_time - start_time - activity_time)
get_mon_arrivals(oversteer)
savehistory("~/Surgical-Chain-R-Shiny/History.Rhistory")
